
		// legend
<%#
 
    MULTI SINGLE STYLE

-%>
<%	if(all(class(style)=="list") && !is(style, "leafletr.style")) {
		sty <- NULL
		for(i in 1:length(style)) sty <- append(sty, attr(style[[i]], "style.type"))
		if(all(sty=="single")) { 
-%>
		var legend = L.control({position: 'bottomright'});
		legend.onAdd = function(map) {
			var div = L.DomUtil.create('div', 'legend');
<%			if(!is.null(attr(style, "leg"))) { %>
			div.innerHTML += '<%= attr(style, "leg") %><br>'
<%			}
		# rearrange layers for legend (point > line > polygon)
		n.dat <- 0
			dat.ra <- style.ra <- list()
			for(i in 1:length(data)) {
				if(getFeatureType(json[[i]])=="point") {
					dat.ra[[n.dat+1]] <- data[[i]]
					style.ra[[n.dat+1]] <- style[[i]]
					if(!is.null(names(data)[i])) names(dat.ra)[n.dat+1] <- names(data)[i]
					n.dat <- n.dat+1
				}
			}
			if(n.dat<length(data)) {
				for(i in 1:length(data)) {
					if(getFeatureType(json[[i]])=="line") {
						dat.ra[[n.dat+1]] <- data[[i]]
						style.ra[[n.dat+1]] <- style[[i]]
						if(!is.null(names(data)[i])) names(dat.ra)[n.dat+1] <- names(data)[i]
						n.dat <- n.dat+1
					}
				}
			}
			if(n.dat<length(data)) {
				for(i in 1:length(data)) {
					if(getFeatureType(json[[i]])=="polygon") {
						dat.ra[[n.dat+1]] <- data[[i]]
						style.ra[[n.dat+1]] <- style[[i]]
						if(!is.null(names(data)[i])) names(dat.ra)[n.dat+1] <- names(data)[i]
						n.dat <- n.dat+1
					}
				}
			}
			
			# get max column width/height
			max.width <- 24
			max.lwd <- 2
			for(i in 1:length(style.ra)) {
				rad <- style.ra[[i]][grep("rad", style.ra[[i]])]
				if(length(rad)==0) rad <- "radius: 10"
				lwd <- style.ra[[i]][grep("weight", style.ra[[i]])]
				if(length(lwd)==0) lwd <- "weight: 2"
				rad <- substr(rad, 9, nchar(rad))
				lwd <- substr(lwd, 9, nchar(lwd))
				width <- as.numeric(rad)*2+as.numeric(lwd)
				if(getFeatureType(dat.ra[[i]])=="polygon") width <- as.numeric(lwd)*2
				if(width>max.width) max.width <- width
				
				lwd <- style.ra[[i]][grep("weight", style.ra[[i]])]
				if(length(lwd)==0) lwd <- "weight: 5"
				lwd <- substr(lwd, 9, nchar(lwd))
				l <- as.numeric(lwd)
				if(l>max.lwd) max.lwd <- l
			}
			# write legend
			for(i in 1:length(style.ra)) { %>
			div.innerHTML +=
<%				fill <- style.ra[[i]][grep("fill", style.ra[[i]])]
				if(length(fill)==0) fill <- "fill: true"
				fill.col <- style.ra[[i]][grep("fillColor", style.ra[[i]])]
				clr <- style.ra[[i]][grep("color", style.ra[[i]])]
				if(length(fill.col)==0) fill.col <- clr
				if(length(fill.col)==0) fill.col <- "color: \"#0033ff\""
				if(length(clr)==0) clr <- "color: \"#0033ff\""
				rad <- style.ra[[i]][grep("rad", style.ra[[i]])]
				if(length(rad)==0) rad <- "radius: 10"
				fill.opa <- style.ra[[i]][grep("fillOpacity", style.ra[[i]])]
				if(length(fill.opa)==0) fill.opa <- "fillOpacity: 0.2"
				opa <- style.ra[[i]][grep("opacity", style.ra[[i]])]
				if(length(opa)==0) opa <- "opacity: 0.5"
				lwd <- style.ra[[i]][grep("weight", style.ra[[i]])]
				
				ft <- getFeatureType(dat.ra[[i]])
				ttl <- names(dat.ra)[i]
				if(!is.null(ttl)) ttl <- gsub("[_.]", " ", ttl)
				if(is.null(ttl)) ttl <- gsub("_", " ", paste(head(strsplit(basename(dat.ra[[i]]), "[.]")[[1]], -1), collapse="_"))
				else if(ttl=="") ttl <- gsub("_", " ", paste(head(strsplit(basename(dat.ra[[i]]), "[.]")[[1]], -1), collapse="_"))
									
				if(ft=="point") {
					rd <- substr(rad, 9, nchar(rad))
					if(length(lwd)==0) lwd <- "weight: 2"
					lwd <- substr(lwd, 9, nchar(lwd))
					if(fill=="fill: false") fill.col <- "none"
					else fill.col <- substr(fill.col, nchar(fill.col)-7, nchar(fill.col)-1)
					st <- paste0("fill: ", fill.col, "; stroke: ", substr(clr, nchar(clr)-7, nchar(clr)-1), "; fill-opacity: ", substr(fill.opa, 14, nchar(fill.opa)), "; stroke-opacity: ", substr(opa, 10, nchar(opa)), "; stroke-width: ", lwd, ";")
-%>
					'<table><tr><td class="shape"><svg style="width: <%= max.width %>px; height: <%= as.numeric(rd)*2+as.numeric(lwd) %>px; xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" style="<%= st %>" cx="<%= max.width/2 %>" cy="<%= (as.numeric(rd)*2+as.numeric(lwd))/2 %>" r="<%= rd %>" /></svg></td><td class="value"><%= ttl %></td></tr></table>'					
<%				} else if(ft=="line") {
					if(length(lwd)==0) lwd <- "weight: 5"
					lwd <- substr(lwd, 9, nchar(lwd))
					st <- paste0("stroke: ", substr(clr, nchar(clr)-7, nchar(clr)-1), "; stroke-opacity: ", substr(opa, 10, nchar(opa)), "; stroke-width: ", lwd, ";")
					if(as.numeric(lwd)<18) hght <- 18
					else hght <- as.numeric(lwd) 
-%>				
					'<table><tr><td class="shape"><svg style="width:<%= max.width %>px; height:<%= hght %>px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><line class="ln" style="<%= st %>" x1="<%= max.lwd+1-(max.lwd-as.numeric(lwd)/2) %>" y1="<%= hght/2 %>" x2="<%= max.width-max.lwd-1+(max.lwd-as.numeric(lwd)/2) %>" y2="<%= hght/2 %>" /></svg></td><td class="value"><%= ttl %></td></tr></table>'				
<%				} else if(ft=="polygon") {
					if(length(lwd)==0) lwd <- "weight: 5"
					lwd <- substr(lwd, 9, nchar(lwd))
					if(fill=="fill: false") fill.col <- "none"
					else fill.col <- substr(fill.col, nchar(fill.col)-7, nchar(fill.col)-1)
					st <- paste0("fill: ", fill.col, "; stroke: ", substr(clr, nchar(clr)-7, nchar(clr)-1), "; fill-opacity: ", substr(fill.opa, 14, nchar(fill.opa)), "; stroke-opacity: ", substr(opa, 10, nchar(opa)), "; stroke-width: ", lwd, ";")
					if(as.numeric(lwd)<11) hght <- 22
					else hght <- as.numeric(lwd)*2 
-%>
					'<table><tr><td class="shape"><svg style="width:<%= max.width %>px; height:<%= hght %>px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><polygon class="plgn" style="<%= st %>" points="<%= max.lwd+1-(max.lwd-as.numeric(lwd)/2) %>, <%= as.numeric(lwd)/2 %> <%= max.width-max.lwd-1+(max.lwd-as.numeric(lwd)/2) %>, <%= hght/2 %> <%= max.width-max.lwd-1+(max.lwd-as.numeric(lwd)/2) %>, <%= hght-as.numeric(lwd)/2 %> <%= max.lwd+1-(max.lwd-as.numeric(lwd)/2) %>, <%= hght-as.numeric(lwd)/2 %>" /></svg></td><td class="value"><%= ttl %></td></tr></table>'
<%				}
			} -%>
			return div;
		};
		legend.addTo(map);
<%		} %>
<%#
 
    GRADUATED OR CATEGORIZED STYLE

-%>
<%	} else if(is(style, "leafletr.style")) { -%>
<%#
 
    GRADUATED STYLE

-%>
<%		if(attr(style, "style.type")=="graduated") {
-%>
				var legend = L.control({position: 'bottomright'});
				legend.onAdd = function(map) {
					var div = L.DomUtil.create('div', 'legend');
				    var labels = [];
				    var grades = [<%= paste(attr(style, "breaks"), collapse=", ") %>];
<%			if(!is.null(attr(style, "leg"))) { %>
					div.innerHTML += '<%= attr(style, "leg") %><br>'
<%			}
			if(attr(style, "style.par")=="col") { # color scale		
				if(attr(style, "out")==0) { # left and right closed 
-%>
					for (var i = 0; i < grades.length-1; i++) { 
						div.innerHTML +=
						        <% if(attr(style, "right")) {%>'<i style="background:' + getValue(grades[i]) + '"></i> ' +
						        <% } else { %>'<i style="background:' + getValue(grades[i]+(grades[1]-grades[0])*0.01) + '"></i> ' + <% } -%>
								grades[i] + '&ndash;' + grades[i + 1] + '<br>';
					}
					
<%				} else if(attr(style, "out")==1) { # left closed and right open 
-%>
					for (var i = 0; i < grades.length; i++) {
						div.innerHTML +=
<%					if(attr(style, "right")) { -%>
							'<i style="background:' + getValue(grades[i]) + '"></i> ' +
						    (grades[i + 1] ? grades[i] + '&ndash;' + grades[i + 1] + '<br>' : '&ge;' + grades[i]);
<%					} else { -%>
						    '<i style="background:' + getValue(grades[i]+(grades[1]-grades[0])*0.01) + '"></i> ' +
						    (grades[i + 1] ? grades[i] + '&ndash;' + grades[i + 1] + '<br>' : '&gt;' + grades[i]);
<%					} -%>
					}
<%				} else if(attr(style, "out")==2) { # left open and right closed 
-%>
					div.innerHTML +=
<%					if(attr(style, "right")) { %>
						'<i style="background:' + getValue(grades[0]-(grades[1]-grades[0])*0.01) + '"></i> &lt;' + grades[0] + '<br>';
<%					} else { %>
						'<i style="background:' + getValue(grades[0]-(grades[1]-grades[0])*0.01) + '"></i> &le;' + grades[0] + '<br>';
<%					} %>
					for (var i = 0; i < grades.length-1; i++) {
						div.innerHTML +=
<%					if(attr(style, "right")) { %>
							'<i style="background:' + getValue(grades[i]) + '"></i> ' +
<%					}else { %>
							'<i style="background:' + getValue(grades[i]+(grades[1]-grades[0])*0.01) + '"></i> ' + 
<%					} %>
							(i<grades.length-1 ? grades[i] + '&ndash;' + grades[i+1] + '<br>' : grades[i] + '&ndash;' + grades[i+1]);
					}
<%				} else { # left and right open 
-%>
					div.innerHTML +=
<%					if(attr(style, "right")) { %>
						'<i style="background:' + getValue(grades[0]-(grades[1]-grades[0])*0.01) + '"></i> &lt;' + grades[0] + '<br>';
<%					} else { %>
						'<i style="background:' + getValue(grades[0]-(grades[1]-grades[0])*0.01) + '"></i> &le;' + grades[0] + '<br>'; 
<%					} %>
					for (var i = 0; i < grades.length; i++) {
						div.innerHTML +=
<%					if(attr(style, "right")) { -%>
						    '<i style="background:' + getValue(grades[i]) + '"></i> ' +
						    (i<grades.length-1 ? grades[i] + '&ndash;' + grades[i+1] + '<br>' : '&ge;' + grades[i]);
<%					} else { -%>
						    '<i style="background:' + getValue(grades[i]+(grades[1]-grades[0])*0.01) + '"></i> ' +
							(i<grades.length-1 ? grades[i] + '&ndash;' + grades[i+1] + '<br>' : '&gt;' + grades[i]);
<%					} -%>
					}	
			//return div;
			//};
<%				} # end out
			} else if(attr(style, "style.par")=="rad") { # radius scale 
				wght <- style[[2]][grep("weight", style[[2]])]
				wght <- as.numeric(gsub(".+\\s+", "", wght))*2
				if(length(wght)==0) wght <- 4
				if(wght==0) {
					xy <- wght+1
					cont <- wght+1
				} else if(wght<=1) {
					xy <- wght+2
					cont <- wght+2
				} else if(wght<=3) {
					xy <- wght
					cont <- wght+2
				} else if(wght<=8) {
					xy <- wght-1
					cont <- wght+2
				} else {
					xy <- wght-3
					cont <- wght+3
				}
				if(attr(style, "out")==0) { # left and right closed
-%>
			for (var i = 0; i < grades.length-1; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-2])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[i])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= xy %>) + '" cy="' + (getValue(grades[i])+<%= xy %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i] + '&ndash;' + grades[i+1] + '</td></tr></table>'
			}
<%				} else if(attr(style, "out")==1) { # left closed and right open
					if(attr(style, "right")) { -%>
			for (var i = 0; i < grades.length-1; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[i])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= xy %>) + '" cy="' + (getValue(grades[i])+<%= xy %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i] + '&ndash;' + grades[i+1] + '</td></tr></table>'
			}
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[grades.length-1])+<%= xy %>) + '" cy="' + (getValue(grades[grades.length-1])+<%= xy %>) + '" r="' + getValue(grades[grades.length-1]) + '" /></svg></td><td class="value">' + '&ge;' + grades[grades.length-1] + '</td></tr></table>'
<%					} else { -%>
			for (var i = 1; i < grades.length; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[i])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= xy %>) + '" cy="' + (getValue(grades[i])+<%= xy %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
			}
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= cont %>) + 'px; height: ' + (getValue(grades[grades.length-1]+1)*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[grades.length-1]+1)+<%= xy %>) + '" cy="' + (getValue(grades[grades.length-1]+1)+<%= xy %>) + '" r="' + getValue(grades[grades.length-1]+1) + '" /></svg></td><td class="value">' + '&gt;' + grades[grades.length-1] + '</td></tr></table>'
<%					} -%>
<%				} else if(attr(style, "out")==2) { # left open and right closed
					if(attr(style, "right")) { -%>
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-2])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[0]-1)*2+<%= cont %>) + 'px; height: ' + (getValue(grades[0]-1)*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[0]-1)+<%= xy %>) + '" cy="' + (getValue(grades[0]-1)+<%= xy %>) + '" r="' + getValue(grades[0]-1) + '" /></svg></td><td class="value">' + '&lt;' + grades[0] + '</td></tr></table>'
			for (var i = 1; i < grades.length; i++) {
				div.innerHTML +=
					 '<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-2])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[i-1])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[i-1])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i-1])+<%= xy %>) + '" cy="' + (getValue(grades[i-1])+<%= xy %>) + '" r="' + getValue(grades[i-1]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
			}
<%					} else { -%>
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[0])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[0])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[0])+<%= xy %>) + '" cy="' + (getValue(grades[0])+<%= xy %>) + '" r="' + getValue(grades[0]) + '" /></svg></td><td class="value">' + '&le;' + grades[0] + '</td></tr></table>'
				for (var i = 1; i < grades.length; i++) {
					div.innerHTML +=
					 	'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[i])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= xy %>) + '" cy="' + (getValue(grades[i])+<%= xy %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
				}
<%					} -%>
<%				} else { # left and right open
					if(attr(style, "right")) { -%>
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[0]-1)*2+<%= cont %>) + 'px; height: ' + (getValue(grades[0]-1)*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[0]-1)+<%= xy %>) + '" cy="' + (getValue(grades[0]-1)+<%= xy %>) + '" r="' + getValue(grades[0]-1) + '" /></svg></td><td class="value">' + '&lt;' + grades[0] + '</td></tr></table>'
			for (var i = 1; i < grades.length; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[i-1])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[i-1])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i-1])+<%= xy %>) + '" cy="' + (getValue(grades[i-1])+<%= xy %>) + '" r="' + getValue(grades[i-1]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
			}
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[grades.length-1])+<%= xy %>) + '" cy="' + (getValue(grades[grades.length-1])+<%= xy %>) + '" r="' + getValue(grades[grades.length-1]) + '" /></svg></td><td class="value">' + '&ge;' + grades[grades.length-1] + '</td></tr></table>'
<%					} else { -%>
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[0])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[0])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[0])+<%= xy %>) + '" cy="' + (getValue(grades[0])+<%= xy %>) + '" r="' + getValue(grades[0]) + '" /></svg></td><td class="value">' + '&le;' + grades[0] + '</td></tr></table>'
			for (var i = 1; i < grades.length; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= cont %>) + 'px; height: ' + (getValue(grades[i])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= xy %>) + '" cy="' + (getValue(grades[i])+<%= xy %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
			}
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= cont %>) + 'px; height: ' + (getValue(grades[grades.length-1]+1)*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[grades.length-1]-2+1)+<%= wght %>) + '" cy="' + (getValue(grades[grades.length-1]+1)+<%= xy %>) + '" r="' + getValue(grades[grades.length-1]+1) + '" /></svg></td><td class="value">' + '&gt;' + grades[grades.length-1] + '</td></tr></table>'
<%					}
				}
			} -%>
				
			return div;
		};
		legend.addTo(map);
				
<%# 

    CATEGORIZED STYLE

-%>
<%		} else if(attr(style, "style.type")=="categorized") { 
			wght <- style[[2]][grep("weight", style[[2]])]
			wght <- as.numeric(gsub(".+\\s+", "", wght))*2
			if(length(wght)==0) wght <- 4
			if(wght==0) {
				xy <- wght+1
				cont <- wght+1
			} else if(wght<=1) {
				xy <- wght+2
				cont <- wght+2
			} else if(wght<=3) {
				xy <- wght
				cont <- wght+2
			} else if(wght<=8) {
				xy <- wght-1
				cont <- wght+2
			} else {
				xy <- wght-3
				cont <- wght+3
			}
-%>
		var legend = L.control({position: 'bottomright'});
		legend.onAdd = function(map) {
			var div = L.DomUtil.create('div', 'legend');
		    var labels = [];
		    var cats = [<%= paste( paste0("'", attr(style, "values"), "'"), collapse=",") %>];
<%			if(!is.null(attr(style, "leg"))) { %>
			div.innerHTML += '<%= attr(style, "leg") %><br>';
<%			}
			if(attr(style, "style.par")=="col") { # color scale
-%>
			for (var i = 0; i < cats.length; i++) {
				div.innerHTML +=
				    '<i style="background:' + getValue(cats[i]) + '"></i> ' +
					cats[i] + '<br>';
			}
<%				if(!is.null(attr(style, "na", T))) { -%>
			div.innerHTML += '<i style="background:' + getValue() + '"></i> <%= attr(style, "na") %>'
<%				}
			} else if(attr(style, "style.par")=="rad") { # radius scale 
-%>
			for (var i = 0; i < cats.length; i++) {
				div.innerHTML +=
				    '<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(cats[cats.length-1])*2+<%= cont %>) + 'px;"><svg style="width: ' + (getValue(cats[i])*2+<%= cont %>) + 'px; height: ' + (getValue(cats[i])*2+<%= cont %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(cats[i])+<%= xy %>) + '" cy="' + (getValue(cats[i])+<%= xy %>) + '" r="' + getValue(cats[i]) + '" /></svg></td><td class="value">' + cats[i] + '</td></tr></table>'
			}
<%				if(!is.null(attr(style, "na", T))) { -%>
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(cats[cats.length-1])*2+1+<%= wght %>) + 'px;"><svg style="width: ' + (getValue()*2+1+<%= wght %>) + 'px; height: ' + (getValue()*2+1+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue()+<%= xy %>) + '" cy="' + (getValue()+<%= xy %>) + '" r="' + getValue() + '" /></svg></td><td class="value">' + '", attr(style, "na"), "' + '</td></tr></table>'
<%				} 
			} -%>
			return div;
		};
		legend.addTo(map);
<%		} 
	}-%>
